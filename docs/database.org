#+TITLE: Definición de la Base de Datos

* DDL: Definiciones
:PROPERTIES:
:header-args:sql: :tangle schema.sql
:END:

** Tablas primarias

*** Presupuesto Anual OPLAU

#+begin_src sql
CREATE TABLE IF NOT EXISTS "budget_entries" (
    "entry_id"     INTEGER PRIMARY KEY NOT NULL,
    "entry_year"   INTEGER NOT NULL,
    "entry_code"   INTEGER NOT NULL,
    "entry_object" TEXT    NOT NULL,
    "entry_amount" REAL    NOT NULL,
    UNIQUE("entry_year", "entry_code")
);
#+end_src

*** Usuarios

#+begin_src sql
CREATE TABLE IF NOT EXISTS "users" (
    "user_id"     INTEGER PRIMARY KEY NOT NULL,
    "user_email"  TEXT    NOT NULL UNIQUE,
    "user_name"   TEXT    NOT NULL,
    "user_active" BOOLEAN NOT NULL
);
#+end_src

*** Cuentas

#+begin_src sql
CREATE TABLE IF NOT EXISTS "accounts" (
    "account_id"     INTEGER PRIMARY KEY NOT NULL,
    "account_abbr"   TEXT    NOT NULL UNIQUE,
    "account_name"   TEXT    NOT NULL UNIQUE,
    "account_active" BOOLEAN NOT NULL
);
#+end_src

**** Permisos

#+begin_src go
type Permission int

const (
    Read Permission = 1 << iota // 1 << 0 = 1
    Write                       // 1 << 1 = 2
    ReadOther                   // 1 << 2 = 4
    WriteOther                  // 1 << 3 = 8
    ReadAdvanced                // 1 << 4 = 16
    WriteAdvanced               // 1 << 5 = 32
)
#+end_src

#+begin_src sql
CREATE TABLE IF NOT EXISTS "permissions" (
    "permission_id"      INTEGER PRIMARY KEY NOT NULL,
    "permission_user"    INTEGER NOT NULL REFERENCES "users"("user_id"),
    "permission_account" INTEGER NOT NULL REFERENCES "accounts"("account_id"),
    "permission_integer" INTEGER NOT NULL,
    "permission_active"  BOOLEAN NOT NULL,
    UNIQUE("permission_user", "permission_account")
);
#+end_src

*** Distribuciones

#+begin_src sql
CREATE TABLE IF NOT EXISTS "distributions" (
    "dist_id"          INTEGER PRIMARY KEY NOT NULL,
    "dist_name"        TEXT    NOT NULL UNIQUE,
    "dist_entry_code"  INTEGER NOT NULL REFERENCES "budget_entries"("entry_id"),
    "dist_account"     INTEGER NOT NULL REFERENCES "accounts"("account_id"),
    "dist_valid_start" INTEGER NOT NULL,
    "dist_valid_end"   INTEGER NOT NULL,
    "dist_amount"      REAL    NOT NULL,
    "dist_active"      BOOLEAN NOT NULL,
    UNIQUE("dist_entry_code", "dist_account"),
    UNIQUE("dist_name", "dist_entry_code")
);
#+end_src

*** Proveedores

#+begin_src sql
CREATE TABLE IF NOT EXISTS "suppliers" (
    "supplier_id"                 INTEGER PRIMARY KEY NOT NULL,
    "supplier_name"               TEXT    NOT NULL,
    "supplier_email"              TEXT    NOT NULL,
    "supplier_phone_country_code" INTEGER NOT NULL DEFAULT '506', -- https://en.wikipedia.org/wiki/List_of_telephone_country_codes
    "supplier_phone"              INTEGER NOT NULL,
    "supplier_location"           TEXT
);

CREATE TABLE IF NOT EXISTS "suppliers_catalogs" (
    "catalog_id"          INTEGER PRIMARY KEY NOT NULL,
    "catalog_provider"    INTEGER NOT NULL REFERENCES "suppliers"("supplier_id"),
    "catalog_grouping"    INTEGER NOT NULL,
    "catalog_article"     INTEGER NOT NULL,
    "catalog_description" TEXT    NOT NULL,
    "catalog_amount"      REAL    NOT NULL,
    UNIQUE("catalog_grouping", "catalog_article")
);
#+end_src

** Solicitudes

#+begin_src sql
CREATE TABLE IF NOT EXISTS "requests" (
    "req_id"      INTEGER PRIMARY KEY NOT NULL,
    "req_user"    INTEGER NOT NULL REFERENCES "users"("user_id"),
    "req_account" INTEGER NOT NULL REFERENCES "accounts"("account_id"),
    "req_issued"  INTEGER NOT NULL,
    "req_descr"   TEXT    NOT NULL,
    "req_justif"  TEXT    NOT NULL,
    "req_notes"   TEXT
);
#+end_src

*** Modificaciones Globales

Ajustes en el presupuesto que acreditan o debitan en una partida presupuestaria, que además es un movimiento exento de impuesto. Por ejemplo, una transferencia hacia una unidad, un tercero o un aumento/rebajo ordinario.

#+begin_src sql
CREATE TABLE IF NOT EXISTS "global_modifications" (
    "global_mod_id"           INTEGER PRIMARY KEY NOT NULL,
    "global_mod_req"          INTEGER NOT NULL REFERENCES "requests"("req_id"),
    "global_mod_debit_entry"  INTEGER REFERENCES "budget_entries"("entry_id"),
    "global_mod_credit_entry" INTEGER REFERENCES "budget_entries"("entry_id"),
    "global_mod_amount"       REAL    NOT NULL,
    "global_mod_letter"       TEXT
    CHECK ("global_mod_debit_entry" IS NOT NULL OR "global_mod_credit_entry" IS NOT NULL)
);
#+end_src

*** Modificaciones Internas

Modificación de las distribuciones emitidas por órganos, exentos de impuesto. Por ejemplo, rebajos por ausencias o solicitudes de ahorro.

#+begin_src sql
CREATE TABLE IF NOT EXISTS "distribution_modifications" (
    "dist_mod_id"              INTEGER PRIMARY KEY NOT NULL,
    "dist_mod_request"         INTEGER NOT NULL REFERENCES "requests"("req_id"),
    "dist_mod_debit_dist"      INTEGER NOT NULL REFERENCES "distributions"("dist_id"),
    "dist_mod_credit_dist"     INTEGER NOT NULL REFERENCES "distributions"("dist_id"),
    "dist_mod_amount"          REAL    NOT NULL,
    "dist_mod_letter"          TEXT
);
#+end_src

*** Compras

Ejecuciones de presupuesto gravadas. Deben rebajarse de una distribución presupuestaria mediante una solicitud, por medio de la cual estarán ligadas a una cuenta.

#+begin_src sql
CREATE TABLE IF NOT EXISTS "purchases" (
    "purchase_id"              INTEGER PRIMARY KEY NOT NULL,
    "purchase_request"         INTEGER NOT NULL REFERENCES "requests"("req_id"),
    "purchase_entry"           INTEGER NOT NULL REFERENCES "budget_entries"("entry_id"),
    "purchase_required"        INTEGER NOT NULL,
    "purchase_supplier"        INTEGER REFERENCES "suppliers"("supplier_id"),
    "purchase_currency"        TEXT    DEFAULT 'CRC', -- https://en.wikipedia.org/wiki/ISO_4217
    "purchase_ex_rate_colones" REAL    DEFAULT '1.00',
    "purchase_gross_amount"    REAL,
    "purchase_discount"        REAL    DEFAULT '0.00',
    "purchase_tax_rate"        REAL    DEFAULT '0.02',
    "purchase_geco_sol"        TEXT,
    "purchase_geco_ord"        TEXT,
    "purchase_letter"          TEXT,
    "purchase_justif_approved" BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS "purchases_breakdown" (
    "breakdown_id"       INTEGER PRIMARY KEY NOT NULL,
    "breakdown_purchase" INTEGER NOT NULL REFERENCES "purchases"("purchase_id"),
    "breakdown_grouping" INTEGER NOT NULL REFERENCES "suppliers_catalogs"("catalog_grouping"),
    "breakdown_article"  INTEGER NOT NULL REFERENCES "suppliers_catalogs"("catalog_article"),
    "breakdown_quantity" REAL    NOT NULL,
    UNIQUE("breakdown_purchase", "breakdown_grouping", "breakdown_article")
);
#+end_src

** Triggers
** Vistas

*** Cuentas Activas

#+begin_src sql
CREATE VIEW IF NOT EXISTS active_accounts AS
SELECT * FROM accounts
WHERE account_active = 1;
#+end_src

*** Usuarios activos

#+begin_src sql
CREATE VIEW IF NOT EXISTS active_users AS
SELECT * FROM users
WHERE user_active = 1;
#+end_src

*** Permisos activos

#+begin_src sql
CREATE VIEW IF NOT EXISTS active_permissions AS
SELECT * FROM permissions
WHERE permission_active = 1;
#+end_src

* DQL: Consultas
:PROPERTIES:
:header-args:sql: :tangle queries.sql
:END:

** Presupuesto

#+begin_src sql
-- name: GetAllBudgetEntries :many
SELECT * FROM budget_entries;
#+end_src

** Usuarios

#+begin_src sql
-- name: AllUsers :many
SELECT * FROM users;

-- name: UserByID :one
SELECT * FROM users
WHERE user_id = ? LIMIT 1;

-- name: UserIDByUserEmail :one
SELECT user_id FROM users
WHERE user_email = ? LIMIT 1;
#+end_src

** Cuentas

#+begin_src sql
-- name: AllAccounts :many
SELECT * FROM accounts;

-- name: AccountByID :one
SELECT * FROM accounts
WHERE account_id = ? LIMIT 1;
#+end_src

** Distribuciones

#+begin_src sql
-- name: AllDistributions :many
SELECT * FROM distributions;
#+end_src

** Suppliers

#+begin_src sql
-- name: AllSuppliers :many
SELECT * FROM suppliers;
#+end_src

** Permisos

#+begin_src sql
-- name: PermissionsByUserID :many
SELECT a.*, u.*, p.*
FROM active_users       u
JOIN active_permissions p ON u.user_id    = p.permission_user
JOIN active_accounts    a ON a.account_id = p.permission_account
WHERE u.user_id = ?;

-- name: PermissionByUserIDAndAccountID :one
SELECT a.*, u.*, p.*
FROM active_permissions p
JOIN active_users       u ON u.user_id    = p.permission_user
JOIN active_accounts    a ON a.account_id = p.permission_account
WHERE u.user_id = ? AND a.account_id = ?;
#+end_src

** Solicitudes

#+begin_src sql
-- name: RequestsByAccountID :many
SELECT * FROM requests
WHERE req_account = ?;
#+end_src

* DML: Gestión
:PROPERTIES:
:header-args:sql: :tangle queries.sql
:END:

** Insertar Presupuesto

#+begin_src sql
-- name: NewBudgetEntry :one
INSERT INTO budget_entries (
    entry_year,
    entry_code,
    entry_object,
    entry_amount
) VALUES (
    ?, ?, ?, ?
) RETURNING *;
#+end_src

** Insertar Usuario

#+begin_src sql
-- name: NewUser :one
INSERT INTO users (
    user_email,
    user_name,
    user_active
) VALUES (
    ?, ?, ?
)
RETURNING *;
#+end_src

** Cambiar estado de usuario

#+begin_src sql
-- name: ToggleUserActiveByUserID :exec
UPDATE users
SET user_active = NOT user_active
WHERE user_id = ?;
#+end_src
** Insertar Cuenta

#+begin_src sql
-- name: AddAccount :one
INSERT INTO accounts (
    account_abbr,
    account_name,
    account_active
) VALUES (
    ?, ?, ?
)
RETURNING *;
#+end_src

** Cambiar estado de cuenta

#+begin_src sql
-- name: ToggleAccountActiveByAccountID :exec
UPDATE accounts
SET account_active = NOT account_active
WHERE account_id = ?;
#+end_src

** Insertar Distribución

#+begin_src sql
-- name: AddDistribution :one
INSERT INTO distributions (
    dist_name,
    dist_entry_code,
    dist_account,
    dist_valid_start,
    dist_valid_end,
    dist_amount,
    dist_active
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
) RETURNING *;
#+end_src

** Cambiar estado de distribución

#+begin_src sql
-- name: ToggleDistributionActiveByDistributionID :exec
UPDATE distributions
SET dist_active = NOT dist_active
WHERE dist_id = ?;
#+end_src

** Actualizar Distribución

#+begin_src sql
-- name: UpdateDistribution :one
UPDATE distributions SET
    dist_name = ?,
    dist_valid_start = ?,
    dist_valid_end = ?,
    dist_amount = ?
WHERE dist_id = ? RETURNING *;
#+end_src

** Insertar Proveedor

#+begin_src sql
-- name: NewSupplier :exec
INSERT INTO suppliers (
    supplier_id,
    supplier_name,
    supplier_email,
    supplier_phone_country_code,
    supplier_phone,
    supplier_location
) VALUES (
    ?, ?, ?, ?, ?, ?
);
#+end_src

