#+TITLE: Definición de la Base de Datos

* DDL: Definiciones
:PROPERTIES:
:header-args:sql: :tangle schema.sql
:END:

** Tablas primarias

*** Presupuesto Anual OPLAU

#+begin_src sql
CREATE TABLE IF NOT EXISTS "budget_entries" (
    "entry_id"     INTEGER PRIMARY KEY NOT NULL,
    "entry_year"   INTEGER NOT NULL,
    "entry_code"   INTEGER NOT NULL,
    "entry_object" TEXT    NOT NULL,
    "entry_amount" REAL    NOT NULL,
    UNIQUE("entry_year", "entry_code")
);
#+end_src

*** Usuarios

#+begin_src sql
CREATE TABLE IF NOT EXISTS "users" (
    "user_id"     INTEGER PRIMARY KEY NOT NULL,
    "user_email"  TEXT    NOT NULL UNIQUE,
    "user_name"   TEXT    NOT NULL,
    "user_active" BOOLEAN NOT NULL
);
#+end_src

*** Cuentas

#+begin_src sql
CREATE TABLE IF NOT EXISTS "accounts" (
    "account_id"     INTEGER PRIMARY KEY NOT NULL,
    "account_abbr"   TEXT    NOT NULL UNIQUE,
    "account_name"   TEXT    NOT NULL UNIQUE,
    "account_active" BOOLEAN NOT NULL
);
#+end_src

*** Permisos

#+begin_src go
type Permission int

const (
    Read Permission = 1 << iota // 1 << 0 = 1
    Write                       // 1 << 1 = 2
    ReadOther                   // 1 << 2 = 4
    WriteOther                  // 1 << 3 = 8
    ReadAdvanced                // 1 << 4 = 16
    WriteAdvanced               // 1 << 5 = 32
)
#+end_src

#+begin_src sql
CREATE TABLE IF NOT EXISTS "permissions" (
    "permission_id"      INTEGER PRIMARY KEY NOT NULL,
    "permission_user"    INTEGER NOT NULL REFERENCES "users"("user_id"),
    "permission_account" INTEGER NOT NULL REFERENCES "accounts"("account_id"),
    "permission_integer" INTEGER NOT NULL,
    "permission_active"  BOOLEAN NOT NULL,
    UNIQUE("permission_user", "permission_account")
);
#+end_src

*** Distribuciones

#+begin_src sql
CREATE TABLE IF NOT EXISTS "periods" (
    "period_id"     INTEGER PRIMARY KEY NOT NULL,
    "period_name"   TEXT    NOT NULL UNIQUE,
    "period_start"  INTEGER NOT NULL,
    "period_end"    INTEGER NOT NULL,
    "period_active" BOOLEAN NOT NULL
);
#+end_src

#+begin_src sql
CREATE TABLE IF NOT EXISTS "distributions" (
    "dist_id"          INTEGER PRIMARY KEY NOT NULL,
    "dist_period"      INTEGER NOT NULL REFERENCES "periods"("period_id"),
    "dist_entry_code"  INTEGER NOT NULL REFERENCES "budget_entries"("entry_id"),
    "dist_account"     INTEGER NOT NULL REFERENCES "accounts"("account_id"),
    "dist_amount"      REAL    NOT NULL,
    "dist_active"      BOOLEAN NOT NULL,
    UNIQUE("dist_period", "dist_entry_code", "dist_account")
);
#+end_src

*** Proveedores

#+begin_src sql
CREATE TABLE IF NOT EXISTS "suppliers" (
    "supplier_id"                 INTEGER PRIMARY KEY NOT NULL,
    "supplier_name"               TEXT    NOT NULL,
    "supplier_email"              TEXT    NOT NULL,
    "supplier_phone_country_code" INTEGER NOT NULL DEFAULT '506', -- https://en.wikipedia.org/wiki/List_of_telephone_country_codes
    "supplier_phone"              INTEGER NOT NULL,
    "supplier_location"           TEXT    NOT NULL
);

CREATE TABLE IF NOT EXISTS "catalogs" (
    "catalog_id"          INTEGER PRIMARY KEY NOT NULL,
    "catalog_supplier"    INTEGER NOT NULL REFERENCES "suppliers"("supplier_id"),
    "catalog_grouping"    INTEGER NOT NULL UNIQUE,
    "catalog_summary"     TEXT    NOT NULL,
    "catalog_tags"        TEXT    NOT NULL
);

CREATE TABLE IF NOT EXISTS "items" (
    "item_id"          INTEGER PRIMARY KEY NOT NULL,
    "item_catalog"     INTEGER NOT NULL REFERENCES "catalogs"("catalog_id"),
    "item_number"      INTEGER NOT NULL,
    "item_summary"     TEXT    NOT NULL,
    "item_description" TEXT    NOT NULL,
    "item_amount"      REAL    NOT NULL,
    UNIQUE("item_catalog", "item_number")
);
#+end_src

** Solicitudes

#+begin_src sql
CREATE TABLE IF NOT EXISTS "requests" (
    "req_id"      INTEGER PRIMARY KEY NOT NULL,
    "req_user"    INTEGER NOT NULL REFERENCES "users"("user_id"),
    "req_account" INTEGER NOT NULL REFERENCES "accounts"("account_id"),
    "req_issued"  INTEGER NOT NULL,
    "req_descr"   TEXT    NOT NULL,
    "req_justif"  TEXT    NOT NULL
);

CREATE TABLE IF NOT EXISTS "request_docs" (
    "doc_id"       INTEGER PRIMARY KEY NOT NULL,
    "doc_purchase" INTEGER NOT NULL REFERENCES "requests"("req_id"),
    "doc_url"      TEXT    NOT NULL
);
#+end_src

*** Modificaciones Globales

Ajustes en el presupuesto que acreditan o debitan en una partida presupuestaria, que además es un movimiento exento de impuesto. Por ejemplo, una transferencia hacia una unidad, un tercero o un aumento/rebajo ordinario.

#+begin_src sql
CREATE TABLE IF NOT EXISTS "global_modifications" (
    "global_mod_id"           INTEGER PRIMARY KEY NOT NULL,
    "global_mod_req"          INTEGER NOT NULL REFERENCES "requests"("req_id"),
    "global_mod_debit_entry"  INTEGER REFERENCES "budget_entries"("entry_id"),
    "global_mod_credit_entry" INTEGER REFERENCES "budget_entries"("entry_id"),
    "global_mod_amount"       REAL    NOT NULL,
    "global_mod_letter"       TEXT
    CHECK ("global_mod_debit_entry" IS NOT NULL OR "global_mod_credit_entry" IS NOT NULL)
);
#+end_src

*** Modificaciones Internas

Modificación de las distribuciones emitidas por órganos, exentos de impuesto. Por ejemplo, rebajos por ausencias o solicitudes de ahorro.

#+begin_src sql
CREATE TABLE IF NOT EXISTS "distribution_modifications" (
    "dist_mod_id"              INTEGER PRIMARY KEY NOT NULL,
    "dist_mod_request"         INTEGER NOT NULL REFERENCES "requests"("req_id"),
    "dist_mod_debit_dist"      INTEGER NOT NULL REFERENCES "distributions"("dist_id"),
    "dist_mod_credit_dist"     INTEGER NOT NULL REFERENCES "distributions"("dist_id"),
    "dist_mod_amount"          REAL    NOT NULL,
    "dist_mod_letter"          TEXT    NOT NULL DEFAULT ''
);
#+end_src

*** Compras

Ejecuciones de presupuesto gravadas. Deben rebajarse de una distribución presupuestaria mediante una solicitud, por medio de la cual estarán ligadas a una cuenta.

#+begin_src sql
CREATE TABLE IF NOT EXISTS "purchases" (
    "purchase_id"              INTEGER PRIMARY KEY NOT NULL,
    "purchase_request"         INTEGER NOT NULL REFERENCES "requests"("req_id"),
    "purchase_required"        INTEGER NOT NULL,
    "purchase_supplier"        INTEGER NOT NULL REFERENCES "suppliers"("supplier_id"),
    "purchase_currency"        TEXT    NOT NULL DEFAULT 'CRC', -- https://en.wikipedia.org/wiki/ISO_4217
    "purchase_ex_rate_colones" REAL    NOT NULL DEFAULT '1.00',
    "purchase_gross_amount"    REAL    NOT NULL,
    "purchase_discount"        REAL    NOT NULL DEFAULT '0.00',
    "purchase_tax_rate"        REAL    NOT NULL DEFAULT '0.02',
    "purchase_geco_sol"        TEXT    NOT NULL DEFAULT '',
    "purchase_geco_ord"        TEXT    NOT NULL DEFAULT '',
    "purchase_bill"            TEXT    NOT NULL DEFAULT '',
    "purchase_transfer"        TEXT    NOT NULL DEFAULT '',
    "purchase_status"          TEXT    NOT NULL DEFAULT ''
);

CREATE TABLE IF NOT EXISTS "purchase_subscriptions" (
    "subscription_id"           INTEGER PRIMARY KEY NOT NULL,
    "subscription_purchase"     INTEGER NOT NULL REFERENCES "purchases"("purchase_id"),
    "subscription_user"         INTEGER NOT NULL REFERENCES "users"("user_id"),
    "subscription_dist"         INTEGER NOT NULL REFERENCES "distributions"("dist_id"),
    "subscription_issued"       INTEGER NOT NULL,
    "subscription_gross_amount" REAL    NOT NULL,
    "subscription_signature"    TEXT    NOT NULL,
    "subscription_signed"       BOOLEAN NOT NULL,
    "subscription_active"       BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS "purchase_breakdowns" (
    "breakdown_id"       INTEGER PRIMARY KEY NOT NULL,
    "breakdown_purchase" INTEGER NOT NULL REFERENCES "purchases"("purchase_id"),
    "breakdown_item"     INTEGER NOT NULL REFERENCES "items"("item_id"),
    "breakdown_quantity" REAL    NOT NULL,
    UNIQUE("breakdown_purchase", "breakdown_item")
);
#+end_src

** Triggers
** Vistas

*** Cuentas Activas

#+begin_src sql
CREATE VIEW IF NOT EXISTS active_accounts AS
SELECT * FROM accounts
WHERE account_active = 1;
#+end_src

*** Usuarios activos

#+begin_src sql
CREATE VIEW IF NOT EXISTS active_users AS
SELECT * FROM users
WHERE user_active = 1;
#+end_src

*** Distribuciones

#+begin_src sql
CREATE VIEW IF NOT EXISTS full_distributions AS
SELECT d.*, p.*, e.*, a.*
FROM distributions  d
JOIN periods        p ON d.dist_period     = p.period_id
JOIN budget_entries e ON d.dist_entry_code = e.entry_id
JOIN accounts       a ON d.dist_account    = a.account_id;
#+end_src

*** Permisos activos

#+begin_src sql
CREATE VIEW IF NOT EXISTS active_permissions AS
SELECT * FROM permissions
WHERE permission_active = 1;
#+end_src

*** Artículos

#+begin_src sql
CREATE VIEW IF NOT EXISTS full_catalogs AS
SELECT c.*, s.*
FROM catalogs  c
JOIN suppliers s ON c.catalog_supplier = s.supplier_id;

CREATE VIEW IF NOT EXISTS full_catalog_items AS
SELECT i.*, c.*
FROM items         i
JOIN full_catalogs c ON i.item_catalog = c.catalog_id;
#+end_src

*** Compras

#+begin_src sql
CREATE VIEW IF NOT EXISTS full_purchases AS
SELECT
  p.*,
  r.*,
  u.*,
  s.*
FROM purchases AS p
JOIN requests  AS r ON p.purchase_request = r.req_id
JOIN users     AS u ON r.req_user        = u.user_id
JOIN suppliers AS s ON p.purchase_supplier = s.supplier_id;

CREATE VIEW IF NOT EXISTS full_purchase_subscriptions AS
SELECT
    ps.*,
    p.*,
    u.*,
    d.*,
    r.*,
    be.*,
    a.*,
    per.*,
    s.*
FROM purchase_subscriptions AS ps
JOIN purchases AS p
    ON ps.subscription_purchase = p.purchase_id
JOIN users AS u
    ON ps.subscription_user = u.user_id
JOIN distributions AS d
    ON ps.subscription_dist = d.dist_id
JOIN requests AS r
    ON p.purchase_request = r.req_id
JOIN budget_entries AS be
    ON d.dist_entry_code = be.entry_id
JOIN accounts AS a
    ON d.dist_account = a.account_id
JOIN periods AS per
    ON d.dist_period = per.period_id
JOIN suppliers AS s
    ON p.purchase_supplier = s.supplier_id;

CREATE VIEW IF NOT EXISTS full_purchase_breakdowns AS
SELECT
    pb.*,
    p.*,
    i.*,
    c.*
FROM purchase_breakdowns pb
JOIN purchases p ON p.purchase_id  = pb.breakdown_purchase
JOIN items i     ON i.item_id      = pb.breakdown_item
JOIN catalogs c  ON i.item_catalog = c.catalog_id;
#+end_src

* DQL: Consultas
:PROPERTIES:
:header-args:sql: :tangle queries.sql
:END:

** Presupuesto

#+begin_src sql
-- name: GetAllBudgetEntries :many
SELECT * FROM budget_entries;
#+end_src

** Usuarios

#+begin_src sql
-- name: AllUsers :many
SELECT * FROM users;

-- name: UserByID :one
SELECT * FROM users
WHERE user_id = ? LIMIT 1;

-- name: UserIDByUserEmail :one
SELECT user_id FROM users
WHERE user_email = ? LIMIT 1;

-- name: ActiveUserIDByUserEmail :one
SELECT user_id FROM active_users
WHERE user_email = ? LIMIT 1;
#+end_src

** Cuentas

#+begin_src sql
-- name: AllAccounts :many
SELECT * FROM accounts;

-- name: AccountByID :one
SELECT * FROM accounts
WHERE account_id = ? LIMIT 1;
#+end_src

** Periodos

#+begin_src sql
-- name: AllPeriods :many
SELECT * FROM periods;
#+end_src

** Distribuciones

#+begin_src sql
-- name: AllDistributions :many
SELECT * FROM full_distributions;

-- name: AllActiveDistributions :many
SELECT * FROM full_distributions WHERE dist_active = 1;

-- name: AccountDistributions :many
SELECT * FROM full_distributions WHERE dist_account = ?;

-- name: AccountActiveDistributions :many
SELECT * FROM full_distributions WHERE dist_account = ? AND dist_active = 1;

-- name: DistributionByID :one
SELECT * FROM full_distributions
WHERE dist_id = ?;
#+end_src

** Proveedores

#+begin_src sql
-- name: AllSuppliers :many
SELECT * FROM suppliers;

-- name: SupplierEmails :many
SELECT supplier_email FROM suppliers;

-- name: SupplierByName :one
SELECT * FROM suppliers
WHERE supplier_name = ?
LIMIT 1;

-- name: SupplierByCatalogGrouping :one
SELECT
  s.*
FROM catalogs AS c
JOIN suppliers AS s
  ON s.supplier_id = c.catalog_supplier
WHERE c.catalog_grouping = ?
LIMIT 1;
#+end_src

** Catálogos

#+begin_src sql
-- name: AllCatalogs :many
SELECT * FROM full_catalogs;

-- name: CatalogByID :one
SELECT * FROM full_catalogs
WHERE catalog_id = ?;

-- name: AllCatalogItems :many
SELECT * FROM full_catalog_items;

-- name: CatalogItemByID :one
SELECT * FROM full_catalog_items
WHERE item_id = ?;

-- name: ItemAmountByID :one
SELECT item_amount FROM items
WHERE item_id = ?;

-- name: BreakdownsByPurchaseID :many
SELECT * FROM full_purchase_breakdowns
WHERE breakdown_purchase = ?;
#+end_src

** Permisos

#+begin_src sql
-- name: PermissionByID :one
SELECT * FROM permissions
WHERE permission_id = ?;

-- name: AllPermissions :many
SELECT a.*, u.*, p.*
FROM users       u
JOIN permissions p ON u.user_id    = p.permission_user
JOIN accounts    a ON a.account_id = p.permission_account;

-- name: PermissionsByUserID :many
SELECT a.*, u.*, p.*
FROM users       u
JOIN permissions p ON u.user_id    = p.permission_user
JOIN accounts    a ON a.account_id = p.permission_account
WHERE u.user_id = ?;

-- name: ActivePermissionsByUserID :many
SELECT a.*, u.*, p.*
FROM active_users       u
JOIN active_permissions p ON u.user_id    = p.permission_user
JOIN active_accounts    a ON a.account_id = p.permission_account
WHERE u.user_id = ?;

-- name: PermissionByUserIDAndAccountID :one
SELECT a.*, u.*, p.*
FROM permissions p
JOIN users       u ON u.user_id    = p.permission_user
JOIN accounts    a ON a.account_id = p.permission_account
WHERE u.user_id = ? AND a.account_id = ?;

-- name: ActivePermissionByUserIDAndAccountID :one
SELECT a.*, u.*, p.*
FROM active_permissions p
JOIN active_users       u ON u.user_id    = p.permission_user
JOIN active_accounts    a ON a.account_id = p.permission_account
WHERE u.user_id = ? AND a.account_id = ?;
#+end_src

** Solicitudes

#+begin_src sql
-- name: RequestsByAccountID :many
SELECT * FROM requests
WHERE req_account = ?;

-- name: RequestByID :one
SELECT * FROM requests
WHERE req_id = ?;
#+end_src

** Compras

#+begin_src sql
-- name: AllPurchases :many
SELECT * FROM full_purchases;

-- name: FullPurchaseByReqID :one
SELECT * FROM full_purchases
WHERE req_id = ?;

-- name: AllPurchaseSubscriptions :many
SELECT * FROM full_purchase_subscriptions;

-- name: FullPurchaseSubscriptionsByDistID :many
SELECT * FROM full_purchase_subscriptions
WHERE subscription_dist = ?;

-- name: PurchaseSubscriptionsByRequestID :many
SELECT DISTINCT *
FROM full_purchase_subscriptions
WHERE req_id = ?;

-- name: PurchaseSubscriptionByRequestIDAndAccountID :one
SELECT DISTINCT *
FROM full_purchase_subscriptions
WHERE req_id = ?
AND account_id = ?;
#+end_src

* DML: Gestión
:PROPERTIES:
:header-args:sql: :tangle queries.sql
:END:

** Insertar Presupuesto

#+begin_src sql
-- name: NewBudgetEntry :one
INSERT INTO budget_entries (
    entry_year,
    entry_code,
    entry_object,
    entry_amount
) VALUES (
    ?, ?, ?, ?
) RETURNING *;
#+end_src

** Insertar Usuario

#+begin_src sql
-- name: NewUser :one
INSERT INTO users (
    user_email,
    user_name,
    user_active
) VALUES (
    ?, ?, ?
)
RETURNING *;
#+end_src

** Cambiar estado de usuario

#+begin_src sql
-- name: ToggleUserActiveByUserID :exec
UPDATE users
SET user_active = NOT user_active
WHERE user_id = ?;
#+end_src
** Insertar Cuenta

#+begin_src sql
-- name: AddAccount :one
INSERT INTO accounts (
    account_abbr,
    account_name,
    account_active
) VALUES (
    ?, ?, ?
)
RETURNING *;
#+end_src

** Cambiar estado de cuenta

#+begin_src sql
-- name: ToggleAccountActiveByAccountID :exec
UPDATE accounts
SET account_active = NOT account_active
WHERE account_id = ?;
#+end_src

** Insertar Permiso

#+begin_src sql
-- name: AddPermission :one
INSERT INTO permissions (
    permission_user,
    permission_account,
    permission_integer,
    permission_active
) VALUES (
    ?, ?, ?, ?
) RETURNING *;
#+end_src

** Cambiar estado de permiso

#+begin_src sql
-- name: TogglePermissionByPermissionID :exec
UPDATE permissions
SET permission_integer = ?
WHERE permission_id = ?;
#+end_src

** Insertar Periodo

#+begin_src sql
-- name: AddPeriod :one
INSERT INTO periods (
    period_name,
    period_start,
    period_end,
    period_active
) VALUES (
    ?, ?, ?, ?
) RETURNING *;
#+end_src

** Actualizar Periodo

#+begin_src sql
-- name: UpdatePeriod :one
UPDATE periods SET
    period_name = ?,
    period_start = ?,
    period_end = ?
WHERE period_id = ? RETURNING *;
#+end_src

** Cambiar estado del periodo

#+begin_src sql
-- name: TogglePeriodActiveByPeriodID :exec
UPDATE periods
SET period_active = NOT period_active
WHERE period_id = ?;
#+end_src

** Insertar Distribución

#+begin_src sql
-- name: AddDistribution :one
INSERT INTO distributions (
    dist_period,
    dist_entry_code,
    dist_account,
    dist_amount,
    dist_active
) VALUES (
    ?, ?, ?, ?, ?
) RETURNING *;
#+end_src

** Cambiar estado de distribución

#+begin_src sql
-- name: ToggleDistributionActiveByDistributionID :exec
UPDATE distributions
SET dist_active = NOT dist_active
WHERE dist_id = ?;
#+end_src

** Actualizar Distribución

#+begin_src sql
-- name: UpdateDistribution :one
UPDATE distributions SET
    dist_amount = ?
WHERE dist_id = ? RETURNING *;
#+end_src

** Insertar Proveedor

#+begin_src sql
-- name: AddSupplier :one
INSERT INTO suppliers (
    supplier_id,
    supplier_name,
    supplier_email,
    supplier_phone_country_code,
    supplier_phone,
    supplier_location
) VALUES (
    ?, ?, ?, ?, ?, ?
) RETURNING *;
#+end_src

** Actualizar Proveedor

#+begin_src sql
-- name: UpdateSupplier :one
UPDATE suppliers SET
    supplier_name = ?,
    supplier_email = ?,
    supplier_phone_country_code = ?,
    supplier_phone = ?,
    supplier_location = ?
WHERE supplier_id = ? RETURNING *;
#+end_src

** Insertar Catálogo

#+begin_src sql
-- name: AddCatalog :one
INSERT INTO catalogs (
    catalog_supplier,
    catalog_grouping,
    catalog_summary,
    catalog_tags
) VALUES (
    ?, ?, ?, ?
) RETURNING *;

-- name: AddItem :one
INSERT INTO items (
    item_catalog,
    item_number,
    item_summary,
    item_description,
    item_amount
) VALUES (
    ?, ?, ?, ?, ?
) RETURNING *;
#+end_src

** Actualizar Catálogo

#+begin_src sql
-- name: UpdateItem :one
UPDATE items SET
    item_number = ?,
    item_summary = ?,
    item_description = ?,
    item_amount = ?
WHERE item_id = ? RETURNING *;
#+end_src

** Insertar Solicitudes

#+begin_src sql
-- name: AddRequest :one
INSERT INTO requests (
    req_user,
    req_account,
    req_issued,
    req_descr,
    req_justif
) VALUES (
    ?, ?, ?, ?, ?
) RETURNING *;
#+end_src

** Insertar Compras

#+begin_src sql
-- name: AddPurchase :one
INSERT INTO purchases (
    purchase_request,
    purchase_required,
    purchase_supplier,
    purchase_currency,
    purchase_ex_rate_colones,
    purchase_gross_amount,
    purchase_discount,
    purchase_tax_rate,
    purchase_geco_sol,
    purchase_geco_ord,
    purchase_bill,
    purchase_transfer,
    purchase_status
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING *;

-- name: AddPurchaseSubscription :one
INSERT INTO purchase_subscriptions (
    "subscription_purchase",
    "subscription_user",
    "subscription_dist",
    "subscription_issued",
    "subscription_gross_amount",
    "subscription_signature",
    "subscription_signed",
    "subscription_active"
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING *;

-- name: UpdatePurchaseSubscription :one
UPDATE purchase_subscriptions
SET subscription_gross_amount = ?,
    subscription_signed = ?,
    subscription_signature = ?,
    subscription_active = ?
WHERE subscription_id = ?
RETURNING *;

-- name: AddPurchaseBreakdown :one
INSERT INTO purchase_breakdowns (
    "breakdown_purchase",
    "breakdown_item",
    "breakdown_quantity"
) VALUES (
    ?, ?, ?
) RETURNING *;
#+end_src

** Actualizar Solicitudes

#+begin_src sql
-- name: PatchRequestCommon :one
UPDATE requests SET
    req_descr = ?,
    req_justif = ?
WHERE req_id = ?
RETURNING *;
#+end_src

** Actualizar Compras

#+begin_src sql
-- name: PatchPurchaseCommon :one
UPDATE purchases SET
    purchase_required = ?,
    purchase_supplier = ?,
    purchase_gross_amount = ?
WHERE purchase_id = ?
RETURNING *;

-- name: PatchPurchaseMeta :one
UPDATE purchases SET
    purchase_geco_sol = ?,
    purchase_geco_ord = ?,
    purchase_bill = ?,
    purchase_transfer = ?,
    purchase_status = ?
WHERE purchase_id = ?
RETURNING *;

-- name: AddPurchaseSub :one
INSERT INTO purchase_subscriptions (
    subscription_gross_amount,
    subscription_signature,
    subscription_signed,
    subscription_active
) VALUES (
    ?, ?, ?, ?
) RETURNING *;

-- name: PatchPurchaseSub :one
UPDATE purchase_subscriptions SET
    subscription_purchase     = ?,
    subscription_user         = ?,
    subscription_dist         = ?,
    subscription_issued       = ?,
    subscription_gross_amount = ?,
    subscription_signature    = ?,
    subscription_signed       = ?,
    subscription_active       = ?
WHERE subscription_id = ?
RETURNING *;
#+end_src

** Cambiar estado de subscripción

#+begin_src sql
-- name: ToggleSubscriptionActiveByID :exec
UPDATE purchase_subscriptions
SET subscription_active = NOT subscription_active
WHERE subscription_id = ?;
#+end_src
